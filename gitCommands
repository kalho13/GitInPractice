git add [filename] 
	--force (adds to repository even if file extension in .gitignore)
git push --message
git pull
	performs 2 actions.  Fetches the changes from the remote repository and merges them into the current branch.
git fetch
	- performs the fetching action of downloading the new commits, but skips the merge steps (which you can 		manually perform later.)
git push
	--set-upstream
	--set-upstream origin [new branch]
	
	changes to default commits to the new branch
	
git status
git clone
rm -rf [depository location/name]
	removes the depository
<<<<<<< HEAD (conflict markings)

git merge
=======
git merge [path] 
	merges this path with the one you have currently checked out [switched to]
	
git merge [branch name] 
	brings the branch name into the current branch

>>>>>>> documentation
	Brings all commits from separate-files branch into master branch.  Those commits then become part of the 		history of the branch.  After a merge, you may decide to keep the existing branch around to add more commits 		to it and perhaps merge again at a later point.  Alternatively you may delete the branch and make future 		commits to the Git default master and create another branch in the future when needed.

	merge type of fast-forward merge means that no merge commit (a commit with multiple parents) was needed, so 		none was made.

	Can get conflicts if there are changes to the same file in multiple branches.
	
	When conflicts have been resolved, a merge commit can be made. This will
	store the two parent commits and the conflicts that were resolved so they can be
	inspected in the future. Unfortunately sometimes people will pick the wrong option
	or merge incorrectly, so it’s good to be able to later see what conflicts they had to
	resolve.
	
	How do I mark as merge conflict as resolved?

	Branches allow two independent tracks through history to be created and committed to without  either modifying 	the other.   Programmers can happily commit to their independent branch without fear of disrupting the work of another 	branch.

	Branching allows two independent tracks of development to occur at once.  For example one branch develops 		version 2 while the other branch fixes bugs in version 1.  Some programmers will create new branches whenever 	they work on a new bug fix or feature and then integrate these branches at a later point.

git branch [branch name]

git branch
	to display the different branches
	
git branch --track

	combined with a start point will set the upstream for the branch (similarly to git push --set-upstream but 		without pushing anything remotely yet.

	git branch can take a second argument with the starting point for the branch.  This defaults to the current 		branch you're on; for example, git branch chapter-two is the equivalent of git branch chapter-two master if 	you are already on the master branch.  This can be used to create branches from previous commits, which is 			sometimes useful if, say, the current master branch state has broken unit tests that you need to be 		working.

git checkout
	changes to the new local branch?  Switchesto anotther branch copies the contents of another branch into 		Git's working directory.  git checkout is requesting the checkout of a particular branch so the current 		state of that branch is checked out into the working directory.

	Make sure you've committed any changes on the current branch before checking out a new branch.  If you don't 		do this git will refuse to check out the new branch if there are changes in that branch to a file with 			uncommitted changes.
	

git checkout [branch name]
	To change to the new branch
	
git rebase

	rebase is a method of history rewriting in Git that is similar to a merge.  A rebase involves changing he 		parent of a commit to point to another.  Changing the parent of a separate branch from the first commit in 		the master branch to the last commit in the master branch, all of the content changes from the master 			branch (added after the branch was created) are now included with the separate branch.  (Wouldn't these 	get merged using the merge command?)

	This means all the content changes from the master branch are now included in the separate-files branch and 		any conflicts were manually resolved but weren’t stored (as they would be in a merge conflict).

	In Git, once a branch has been merged, the history of the branch is still visible in the history and the 		branch 	can be safely deleted as a merged branch is, at that point, just a ref to an existing commit in the 	history of the branch it was merged into.
	
git delete
git push --delete [source branch]
	Example origin chapter-two
	this deletes the remote branch called chapter-two on the server)(do this from master
	
git branch --delete [local branch] 
	Example: delete chapter-two 

	This deletes the local branch after it has been merged.

	Sometimes branches in version control systems are kept around for a long time and sometimes they’re very 		temporary. A long-running branch may be one that represents the version deployed to a particular server. A 		short-running branch may be a single bug fix or feature that has been completed. In Git, once a branch has 	been merged, the history of the branch is still visible in the history and the branch can be safely deleted 			as a merged branch is, at that point, just a ref to an existing commit in the history of the branch it 	was merged into.
	
	Why delete the remote branch before the local branch?
	We had merged all the chapter-two changes into the master branch and pushed this to origin/master. As a result		, the chapter-two and origin/chapter-two branches are no longer needed. But Git will refuse to delete a local 	branch with git branch --delete if it hasn’t been merged into the current branch or its changes haven’t been 			pushed to its tracking branch (origin/chapter-two in this case). Deleting origin/chapter-two first means 		that the local chapter-two branch can be deleted by git branch --delete without Git complaining that 		chapter	-two has changes that need pushed to origin/chapter-two.

git mv [oldFileName] [newFileName]
	--force (allows overwriting an existing file with same name)
	to rename or move a file
	
	Git keeps track of the changes to files in the working directory of a repository by their name. When you move 	or rename a file, Git doesn’t see that a file was moved, but that there’s a file with a new filename and the 			file with the old filename was deleted (even if the contents remains the same). As a result of this, 			renaming or moving a file in Git is essentially the same operation; both are telling Git to look for an 	existing file in a new location.
	
	It’s also possible to rename files or directories and move files or directories into other directories inside 	the same Git repository using the git mv command and the same syntax as earlier. If you want to move files 			into or out of a repository, you must use a different, non-Git command (such as a Unix mv command), as Git 	doesn’t handle moving files between different repositories with git mv.
	
	What if the new filename already exists?
	If the filename that you move to already exists, you’ll need to use the git mv -f (or --force) option to 		request Git to overwrite whatever file is at the destination. If the destination file hasn’t already been 		added or committed to Git then it won’t be possible to retrieve the contents if you erroneously asked Git to 	overwrite it.
	
git rm [filename] 
	-remove a file
	
	Like moving and renaming files, removing files from version control systems requires not just performing the 		filesystem operation as usual, but also notifying Git and committing the file. In almost any version			-controlled project, you’ll at some point want to remove some files, so it’s essential to know how to do 		so. Removing version-controlled files is also more safe than removing non-version-controlled files as, 		even after removal, the files will still exist in the history.
	
